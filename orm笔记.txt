orm框架笔记：

路线图--》：
概览 --〉核心接口-->Selector  起步
简单查询：
没有orm框架：手写容易出错，重构困难

核心
元数据：元数据是对模型的描述
    三层：modelinfo->fieldsMap->fieldlinfo 三个层级
           表        列        字段

    查询接口 三个
        DQL
        QueryBuilder
        QuerySeter


Gorm 的元数据
        两级：
     查询接口
        Writer 接口
        interface 接口

     事物接口：
     Begin
     save point支持


     Ent 根源上是是两个方向
什么是ORm：
    对象-关系映射
    帮助用户完成对象到SQL
    框架
    对象--》sql ：

    结果集--》对象

    功能：
        SQL ：增删改成 进阶 DDL修改表结构
        映射： 将结果集封装成对象
        事物： 主要在于维护好 事务状态
        元数据：SQL和映射两个部分的基石
        AOP：处理横向关注点
        关联关系：
        方言：兼容不同数据库



构造SQL语句
    Beego:
        优点：用户来说API很简单
        缺点：耦合性强 拓展性差
        QueryBuilder
        必须完全按照SQL的语句的顺序来调用这个方法
    Gorm:
        Builder
        Expression
        Clause
        Interface
        核心是 我不知道怎么构造SQL，但你们知道
        Build和build


    ttOrm:
        第一种 直接设计一叫ORM然后 不断加方法
           orm的实例应该 是无状态的，可以被复用 是线程安全的
           orm接口无法使用泛型
           大而全 有新的需求 就往里加
        第二种：大一统的Query 增删改放在一起 builder模式

        第三种：直接定义Selector接口 单一职责Builder模式

        Builder模式：分为中间方法和终结方法
        链式调用

        第四种：只定义Builder模式的终结方法

        实现 ：builder模式
            使用泛型做约束
            额外引入一个QueryBuilder作为构建SQL这一个单独步骤的顶级抽象
    SELECT 语句规范：
        FROM
        WHERE
        HAVING
        ORDER BY
        GROUP BY
        LIMIT 和 OFFSET


        是否切割
        WHERE
             Gorm： 很简单 容易写错
             第二种：用户指定 Where的列名 缺点不支持复杂方法
             第三种：不在接收字符串 变成结构体
             Gorm 顶级的Expression的接口
                Predicate： 谓词 （条件）
             Gorm 是一个多叉树
             ttorm ：是一个二叉树 只需要左右两边递归


             Select 面试 ：
                Gorm如何构造SQL： 四个抽象，Builder、Expression、Clause和Interface
                               概括：SQL的不同部分分开构造，早拼接在一起
                Builder模式能干啥：ORM的例子 Builder模式尤其是适合链式调用。
                在ORM框架使用泛型有什么优点？ 能够约束用户传入的参数或者用户希望得到返回值，加强类型安全。
                手写SQL
    元数据：
        为什么要元数据--校验问题
        不做 数据库返回
        做： 方便测试 不连数据库就可以测试出来
        干什么 构建SQL 处理结果集
        go 到DB 一一对应
        Gorm Schema                     Field
              模型（对应表名 表结构。。。）   列

    反射： 系统类型
        可以看成两部分
            值
            实际类型
        相关API都在reflect包
        最核心
            reflect.Value：用做值操作,部分值可以被修改
            reflect.Type ：用操作类信息，类信息是只读的

            reflect Kind
            kind 本身是一个枚举值 掉反射包时候先读注释

            反射输出所有字段的名字
            检查一下多级指针问题 用for

            修改字段的值


    元数据：
        为什么需要
            go 和你数据库表映射的基石

    元数据注册中心：
        注册下来然后缓存就好了
        全局一个Map：
            缺乏扩展性
            缺乏个隔离性
            难以测试

         定义一个registry
         但是全局维持一个实例：

        为什么说DB是最佳选择
            DB是一个天然的隔离

            key 三种选择

            结构体名字
            表名
            reflect.Typed
        并发安全：
            去除并发场景：web框架 启动前注册路由 牺牲开发体验
            应用启动：
            double -check
            sync.Map

        自定义段名和列名
        Beego 两种
        TAg
        实现特定接口

        Gorm ： 相同的形态

        总结：
            标签形态：
                优点：直接和模型定义在一起，非常内聚
                缺点：标签很容易写错
            接口：
                优点：也是直接定义在模型之上的，可以利用接口来简单实现分库分表功能。
                缺点：比较隐晦，用户可能都不知道能实现什么接口
            编程注册：


    初始化DB
        传 驱动 driver
        dsn：简单理解就是数据库连接信息
        常见错误：忘记匿名引入driver包

    driver.Valuer 和sql.Scanner 接口
    场景：
    SQL 默认支持的类型就是基础类型，[]byte和string
    driver.Valuer 读取
    sql.Scanner 写入

    事物API
    tx, err := db.BeginTx(ctx, &sql.TxOptions{})
    	require.NoError(t, err)
    	    // 提交事物
        	tx.Commit()
        	//回滚
        	//tx.Rollback()
    TxOptions 隔离级别
    序列化： 事务与事务是挨个执行读
    可重复读：A事物无法看到B事务读修改 事务A 只要不提交就不会知道事务B修改了 --幻读
    已提交读：事务A无法看到B事务未修改的事务，但是可以看到提交的 -- 不可重复读  幻读
    未提交读：事务A可以看到事务B的未提交的修改的  -- 脏读 -- 不可重复读 幻读
    异常：
    --异常 脏读  A事务能看到B事务未提交的修改
          不可重复读   A事务内同一个SQL读到了不同的数据 --未提交读和以提交读
          幻读  A事务内读到了B事务内新插入的数据  ；理论上 但是InnoDB引擎不会发生幻读

    性能和隔离级别成反比
    Mysql 默认是可重复读

    PrepareStatement 预查询

    记得关闭他就好了
    sqlmcok 入门
    用sqlmock来模拟单元测试
        使用
        初始化：返回一个mockDB 类型*sql.DB

    结果集 处理 反射 和unsafe
    go 的内存布局
    需要掌握：
        计算地址
        计算偏移量
        直接操作内存


        go unsafe 按照字长对齐
        32位 4个字字节对齐
        64位字长机器 按照8个字节对齐
        go本身每一次访问内存都是按照字长倍数来访问的

        unsafe.Pointer是一个GO层面的指针
         GC会维护
         uintptr 代表一个数字， 适用于地址运算 记录偏移量
         同一个对象在GC前后会变的

         GC：算法是 标记-复制